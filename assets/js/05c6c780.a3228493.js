"use strict";(self.webpackChunkfhsdocs=self.webpackChunkfhsdocs||[]).push([[319],{7207:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>l,frontMatter:()=>d,metadata:()=>o,toc:()=>m});var a=n(4848),r=n(8453);const d={title:"FRAMID Transformation",unlisted:!1,authors:["qiushan"],tags:["framid","R","Python","SAS"],hide_table_of_contents:!0,date:new Date("2023-05-28T00:00:00.000Z")},i=void 0,o={permalink:"/blog/2023/05/28/get-framid",source:"@site/blog/2023/05-28-get-framid.md",title:"FRAMID Transformation",description:"The health exam datasets from the Framingham Heart Study (FHS) use 'idtype' and 'id' to identify each person uniquely. However, in some shared datasets, 'framid' is often used for the same purpose. When merging data from both sources, the first step is to create the 'framid' as the primary key. Keep in mind, we expect variable names to be in lowercase in the following programs. But, if they're in uppercase, you might need to make extra adjustments, especially if your software is case-sensitive.",date:"2023-05-28T00:00:00.000Z",tags:[{label:"framid",permalink:"/blog/tags/framid"},{label:"R",permalink:"/blog/tags/r"},{label:"Python",permalink:"/blog/tags/python"},{label:"SAS",permalink:"/blog/tags/sas"}],hasTruncateMarker:!0,authors:[{name:"Qiushan Tao",title:"FHS-BAP Data Core",imageURL:"/img/datacore/qt01_avatar.png",key:"qiushan"}],frontMatter:{title:"FRAMID Transformation",unlisted:!1,authors:["qiushan"],tags:["framid","R","Python","SAS"],hide_table_of_contents:!0,date:"2023-05-28T00:00:00.000Z"},unlisted:!1,prevItem:{title:"BROC Data Query Tutorial",permalink:"/blog/2023/10/25/data-query-tutorial"}},s={authorsImageUrls:[void 0]},m=[{value:"The Python function used to retrieve the &#39;framid&#39;.",id:"the-python-function-used-to-retrieve-the-framid",level:4},{value:"The SAS code used to retrieve the &#39;framid&#39;.",id:"the-sas-code-used-to-retrieve-the-framid",level:4}];function h(e){const t={admonition:"admonition",code:"code",h4:"h4",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.admonition,{title:"summary",type:"tip",children:(0,a.jsx)(t.p,{children:"The health exam datasets from the Framingham Heart Study (FHS) use 'idtype' and 'id' to identify each person uniquely. However, in some shared datasets, 'framid' is often used for the same purpose. When merging data from both sources, the first step is to create the 'framid' as the primary key. Keep in mind, we expect variable names to be in lowercase in the following programs. But, if they're in uppercase, you might need to make extra adjustments, especially if your software is case-sensitive."})}),"\n",(0,a.jsx)(t.admonition,{title:"note",type:"danger",children:(0,a.jsx)(t.p,{children:"The study IDs provided in this tutorial are dummy IDs used for demonstration purposes only and do not represent real data."})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-r",metastring:'title="get_framid.r"',children:"#####################################################################\n#  License      : This source code is licensed under the MIT license.\n#  Author(s)    : FHS-BAP data core (QT).\n#  Release date : TBA\n#  Description  : Get the framid from IDTYPE and ID in FHS Data. \n#  Usage        : library(dplyr)\n#               : data <- data %>%\n#               :     dplyr::mutate(framid = get_framid(idtype, id)\n#####################################################################\n\nget_framid <- function(idtype, id) {\n  # Check if idtype and id have compatible lengths\n  if (!((length(idtype) == 1 & length(id) >= 1) | \n        (length(idtype) == length(id)))) {\n    stop(\"Error: The lengths of 'idtype' and 'id' don't match!\")\n  }\n  \n  # Define the id_matrix\n  id_matrix <- data.frame(\n    idtype = c(0, 1, 2, 3, 7, 72),\n    cohort = c('Gen 1', 'Gen 2', 'NOS', 'Gen 3', 'Omni 1', 'Omni 2'),\n    adjust_factor = c(0, 80000, 20000, 30000, 70000, 720000)\n  )\n  \n  # Merge idtype and id with id_matrix\n  merged_data <- merge(data.frame(idtype = idtype, id = id), \n                       id_matrix, by = \"idtype\", all.x = TRUE)\n  \n  # Calculate the framid by adding id and adjust_factor\n  return(merged_data$id + merged_data$adjust_factor)\n}\n"})}),"\n",(0,a.jsx)(t.h4,{id:"the-python-function-used-to-retrieve-the-framid",children:"The Python function used to retrieve the 'framid'."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",metastring:'title="get_framid.py"',children:"#########################################################################\n#  The Python function used to retrieve the 'framid'.\n#  NOTE: The study IDs provided in this tutorial are dummy IDs used for\n#        demonstration purposes only and do not represent real data.\n#########################################################################\n\nimport pandas as pd\n\ndef get_framid(examdata):\n    # Create id_matrix DataFrame\n    id_matrix_data = {\n        'idtype': [0, 1, 2, 3, 7, 72],\n        'cohort': ['Gen_1', 'Gen_2', 'NOS', 'Gen_3', 'Omni_1', 'Omni_2'],\n        'adjust_factor': [0, 80000, 20000, 30000, 70000, 720000]\n    }\n    id_matrix = pd.DataFrame(id_matrix_data)\n\n    # Merge examdata and id_matrix DataFrames\n    merged_data = pd.merge(examdata, id_matrix, on='idtype')\n\n    # Check if idtype and id_exam have compatible lengths\n    if not ((len(merged_data['idtype']) == 1 and len(merged_data['id']) >= 1) or\n            (len(merged_data['idtype']) == len(merged_data['id']))):\n        print(\"Error: The lengths of 'idtype' and 'id' don't match!\")\n        raise ValueError(\"Error: The lengths of 'idtype' and 'id' don't match!\")\n\n    # Calculate framid\n    merged_data['framid'] = merged_data['id'] + merged_data['adjust_factor']\n\n    # Drop unnecessary columns\n    merged_data.drop(['cohort', 'adjust_factor'], axis=1, inplace=True)\n\n    return merged_data\n\n###############################################################\n# Example usage:\n#  (1) Create sample data for demonstration \n#  (2) Apply the get_framid() function to the sample data.\n###############################################################\nexamdata = pd.DataFrame({\n    'idtype': [0, 1, 2, 3, 7, 72],\n    'id': [1, 2, 3, 4, 5, 6]\n})\n\nresult = get_framid(examdata)\nprint(result)\n"})}),"\n",(0,a.jsx)(t.h4,{id:"the-sas-code-used-to-retrieve-the-framid",children:"The SAS code used to retrieve the 'framid'."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sas",metastring:'title="get_framid.sas"',children:"/*********************************************************************\n* The SAS code used to retrieve the 'framid'.\n* Create sample data for demonstration.\n* NOTE: The study IDs provided in this tutorial are dummy IDs used \n*       demonstration purposes only  and do not represent real data.\n**********************************************************************/\ndata examdata;\n    input idtype id;\n    datalines;\n0   1\n1   2\n2   3 \n3   4\n7   5\n72  6 \n;\nrun;\n\ndata id_matrix;\n    input idtype cohort $ adjust_factor;\n    datalines;\n0  Gen_1       0\n1  Gen_2   80000\n2  NOS     20000\n3  Gen_3   30000\n7  Omni_1  70000\n72 Omni_2 720000\n;\nrun;\n\ndata get_framid;\n    merge examdata id_matrix;\n    by idtype;\n    if not ((n(idtype) = 1 and n(id) >= 1) or (n(idtype) = n(id))) then do;\n        put \"Error: The lengths of 'idtype' and 'id' don't match!\";\n        _ERROR_ = 1;\n    end;\n    framid = id + adjust_factor;\n    drop cohort adjust_factor;\nrun;\n"})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var a=n(6540);const r={},d=a.createContext(r);function i(e){const t=a.useContext(d);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(d.Provider,{value:t},e.children)}}}]);